# -*- coding: utf-8 -*-
"""CSV_result_processor-all.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DmEBBRyRX2sLf7lXj8wXi-LmNm343Q1X

## CSV Results Processor

Graph results of climate prediction data captured via CSV data.
"""
import glob
import os
import pandas as pd
from pathlib import Path
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.ticker as plticker
from projectutil import *

## ###############################
## DO NOT MODIFY
DRIVE_PATH = "/data/projects/climate-data-model/"
# Set the location of this script in GDrive
SCRIPT_PATH = DRIVE_PATH + "py-src/"
# Location of run data
JOURNAL_LOG = SCRIPT_PATH + "cv-results.csv"
DATA_ROOT = DRIVE_PATH + "data/preds/"
# Colors for rendering
colors = 'rbygm'
## ###############################

## Run parameters
debug = False
JOURNAL_LOG = "cv-results.csv"

# -- UNCOMMENT to load a particular result set --
# UC1
# DATA_ROOTS = ["data/preds-s30/","data/preds-s31/","data/preds-s34/","data/preds-s35/","data/preds-s36/"]
# UC3
# DATA_ROOTS = ["data/preds-s28/","data/preds-s29/","data/preds-s26/"]
# UC3
DATA_ROOTS = ["data/preds-s39/","data/preds-s40/","data/preds-s41/"]

# Visualization params
METRIC = 'RMSE'
GROUP_COLS = ['TargetLabel','Model','InputWindow','LabelWindow','TestPct','Columns','NumFeatures','Scaler']
TAKE_TOP=3

# Process:
# 1. load and read each listed CSV - keep top 3 or smthg
# 2. append to previous
# 3. graph results
df_all = None

for dir_name in DATA_ROOTS:
  journal_log = DRIVE_PATH + dir_name + JOURNAL_LOG
  print(f'Loading log: {journal_log}')

  # Load CSV overall results
  df = pd.read_csv(journal_log)
  # Delete rows w/o a real serial
  df = df[df['Serial'] > 10]

  df_net = df.groupby(GROUP_COLS).mean()
  df_net.reset_index(inplace=True)
  df_net = df_retain(df_net, ['Model', 'InputWindow', 'LabelWindow', 'NumFeatures', 'Scaler', 'RMSE'])
  df_net.sort_values(by='RMSE', inplace=True)
  df_net['journal'] = range(df_net.shape[0])
  df_net['journal'] = dir_name

  # Take top N
  df_net = df_net.iloc[:TAKE_TOP]
  print(f'## df_net: {df_net}')

  if (df_all is None):
    df_all = df_net
  else:
    df_all = pd.concat([df_all, df_net])



#--------- Plot 2 ------------
# create X labels
df_all['label'] = df_all.apply(lambda x: f"{x.journal}{x['Model']}-{x.InputWindow}-{x.LabelWindow}-{x.NumFeatures}-{x.Scaler}", axis=1)
df_all = df_retain(df_all, ['label','RMSE'])
print(f'## Plotting df_all: {df_all}')

fig, ax = plt.subplots(1, 1, figsize=(11, 6), layout="constrained")
sns.barplot(x=df_all['label'], y=df_all[METRIC], ax=ax)
plt.xticks(rotation=90)
plt.title(f'Overall Best {METRIC} Performers Across all Window Configurations')
plt.show()

# -*- coding: utf-8 -*-
"""TeamH_Project_MainDriver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DX-y7IzyW7Q0CiR8ipr3WSCsa3sCVwcF

## Data606 - Capstone Project
```
Group H
Malav Patel, Kent Butler
Prof. Unal Sokaglu
```

Make predictions based on the given model.

# Research

### References


"""

import pandas as pd
from datetime import datetime as dt
import datetime

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import math
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
plt.rcParams["figure.figsize"] = (10,6)
import warnings
warnings.filterwarnings('ignore')
plt.style.use('seaborn')

# Import local source
from projectutil import *
from modelexecutor import ModelExecutor


DRIVE_PATH = "/data/projects/climate-data-model/"
# Set the location of this script in GDrive
SCRIPT_PATH = DRIVE_PATH + "py-src/"
# Root Path of the data on the cloud drive
DATA_ROOT = DRIVE_PATH + "data/"
# Location of logged output prediction data
LOG_PATH = DATA_ROOT + "preds/"
# Journal file
JOURNAL_LOG = SCRIPT_PATH + "cv-results.csv"
# Start including data from this date
START_DATE =  pd.to_datetime(dt.fromisoformat('1950-01-01'))
# Stop including data after this date
END_DATE = pd.to_datetime(dt.fromisoformat('2015-12-01'))

"""**Parameters**"""

INPUT_WINDOW = 60
LABEL_WINDOW = 60
MODEL_FILENAME = '20231122-1450-Densev1-915395.hdf5'
MODEL_NAME = 'Densev11'
MODEL_PATH = DATA_ROOT + "preds-s9/"

"""**Dataset Definitions**"""

# Label to predict
TARGET_LABEL = 'landSeaAvgTemp'

# Datasets
TEMP_DATA = {'filename':'GlobalTemperatures.csv',
             'feature_map':{'LandAndOceanAverageTemperature':'landSeaAvgTemp'},
             'date_col':'dt'}

AIR_TEMP_DATA = {'filename':'berkeley-earth-temperature.Global_Land_and_Ocean_Air_Temps-groomed.csv',
             'feature_map':{'GlobalAverageTemp':'airPrefAvgTemp'},
             'date_col':'date'}

SEA_TEMP_DATA = {'filename':'berkeley-earth-temperature.Global_Land_and_Ocean_Sea_Temps-groomed.csv',
             'feature_map':{'GlobalAverageTemp':'seaPrefAvgTemp'},
             'date_col':'date'}

CO2_DATA = {'filename':"atmospheric-co2.csv",
            'feature_map':{'Carbon Dioxide (ppm)':'co2', 'Seasonally Adjusted CO2 (ppm)':'co2_seas'},
            'date_map':{'Year':'year','Month':'month'}}

CO2_ICE_DATA = {'filename':"co2-daily-millenia-groomed.csv",
            'feature_map':{'co2':'co2'},
                'date_col': 'date'}

GHG_HIST_DATA = {'filename':'owid-co2-data-groomed.csv',
           'feature_map':{'share_global_cumulative_luc_co2':'share_global_cumulative_luc_co2',
                          'share_global_luc_co2':'share_global_luc_co2',
                          'share_of_temperature_change_from_ghg':'share_of_temperature_change_from_ghg',
                          'temperature_change_from_co2':'temperature_change_from_co2',
                          'land_use_change_co2':'land_use_change_co2',
                          'cumulative_luc_co2':'cumulative_luc_co2'},
           'date_map':{'year':'year'}}

SEAICE_DATA = {'filename':"seaice.csv",
               'feature_map':{'     Extent':'ice_extent'},
               'date_map':{' Month':'month','Year':'year',' Day':'day'}}

WEATHER_DATA = {'filename':"finalDatasetWithRain.csv",
                'feature_map':{'air_x':'air_x','air_y':'air_y','uwnd':'uwnd'},
                'date_col':'time'}

VOLCANO_DATA = {'filename':'eruptions-conditioned.csv',
                'feature_map':{'vei':'volcanic_idx'},
                'date_map':{'start_year':'year','start_month':'month'}}

FOREST_DATA = {'filename':'WorldForestCover-Interpolated.csv',
               'feature_map':{'PctCover-Int':'pct_forest_cover'},
               'date_col':'date'}

SUNSPOT_DATA = {'filename':'sunspotnumber.csv',
               'feature_map':{'suns_spot_number':'sunspot_num'},
               'date_map':{'year':'year'}}

POLICY_DATA = {'filename':'GlobalEnvPolicies.csv',
               'feature_map':{'EventRating':'policy_rating'},
               'date_col':'date'}

#GHG_DATA = {'filename':'greenhouse_gas_inventory_data.csv',
#            'feature_map':{''},
#            'date_map':{'Year':'year'}}

"""**Run Parameters**"""

debug = False
# plt.ion()   # disable graphs
DATASET=[SEAICE_DATA, VOLCANO_DATA, FOREST_DATA, SUNSPOT_DATA, CO2_DATA, WEATHER_DATA, POLICY_DATA]

"""# Set up and run Predictions """
# re-construct the model exec b/c it contains some state
# exec = ModelExecutor(data_path=DATA_ROOT, log_path=LOG_PATH, journal_log=JOURNAL_LOG, start_date=START_DATE, end_date=END_DATE,
#                     input_window=INPUT_WINDOW, label_window=LABEL_WINDOW,
#                     target_label=TARGET_LABEL, debug=True)
exec = ModelExecutor(data_path=DATA_ROOT, log_path=LOG_PATH, journal_log=JOURNAL_LOG, start_date=START_DATE, end_date=END_DATE,
                    input_window=INPUT_WINDOW, label_window=LABEL_WINDOW, shift=1, test_ratio=0.2, val_ratio=0.1,
                    num_epochs=300, target_label=TARGET_LABEL, model_name=MODEL_NAME, debug=True)

exec.load_initial_dataset(TEMP_DATA['filename'], TEMP_DATA['feature_map'], date_map=None, date_col=TEMP_DATA['date_col'])

exec.load_datasets(DATASET)

exec.load_model(f'{MODEL_PATH}{MODEL_FILENAME}')
exec.predict()
